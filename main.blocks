<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="ZS8P6J{dj:8-{kjgz:lW" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="/bF7B[~V}{Rj~8PUa(@f" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace IFS_IOT {" line1="    enum Cmd {" line2="        None," line3="        ConnectWifi," line4="        ConnectMqtt," line5="    }" line6="" line7="" line8="    export enum SchemeList {" line9="        //% block=&quot;TCP&quot;" line10="        TCP = 1," line11="        //% block=&quot;TLS&quot;" line12="        TLS = 2" line13="    }" line14="" line15="    export enum QosList {" line16="        //% block=&quot;0&quot;" line17="        Qos0 = 0," line18="        //% block=&quot;1&quot;" line19="        Qos1," line20="        //% block=&quot;2&quot;" line21="        Qos2" line22="    }" line23="" line24="    let wifi_connected: boolean = false" line25="    let mqttBrokerConnected: boolean = false" line26="    let userToken_def: string = &quot;&quot;" line27="    let topic_def: string = &quot;&quot;" line28="    const mqttSubscribeHandlers: { [topic: string]: (message: string) =&gt; void } = {}" line29="    const mqttSubscribeQos: { [topic: string]: number } = {}" line30="    let mqtthost_def = &quot;IFS&quot;" line31="" line32="    let serialCnt = 0" line33="    let recvString = &quot;&quot;" line34="    let scanWIFIAPFlag = 0" line35="    let currentCmd: Cmd = Cmd.None" line36="" line37="    const EspEventSource = 3000" line38="    const EspEventValue = {" line39="        None: Cmd.None," line40="        ConnectWifi: Cmd.ConnectWifi," line41="        ConnectMqtt: Cmd.ConnectMqtt," line42="    }" line43="" line44="    let TStoSendStr = &quot;&quot;" line45="" line46="    // write AT command with CR+LF ending" line47="    function sendAT(command: string, wait: number = 0) {" line48="        serial.writeString(`${command}\u000D\u000A`)" line49="        basic.pause(wait)" line50="    }" line51="" line52="    function restEsp8266() {" line53="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line54="        sendAT(&quot;AT+RST&quot;, 1000) // rest" line55="        serial.readString()" line56="        sendAT(&quot;AT+CWMODE=1&quot;, 500) // set to STA mode" line57="        sendAT(&quot;AT+SYSTIMESTAMP=1634953609130&quot;, 100) // Set local timestamp." line58="        sendAT(`AT+CIPSNTPCFG=1,8,&quot;ntp1.aliyun.com&quot;,&quot;0.pool.ntp.org&quot;,&quot;time.google.com&quot;`, 100)" line59="        basic.pause(3000)" line60="    }" line61="" line62="    function scanWIFIAP(ssid: string) {" line63="" line64="        let scanflag = 0" line65="        let mscnt = 0" line66="        recvString = &quot; &quot;" line67="        sendAT(`AT+CWLAPOPT=1,2,-100,255`)" line68="        sendAT(`AT+CWLAP`)" line69="        while (!(scanflag)) {" line70="" line71="            recvString = recvString + serial.readString()" line72="            basic.pause(1)" line73="            mscnt += 1" line74="            if (mscnt &gt;= 3000) {" line75="                scanWIFIAPFlag = 0" line76="                break" line77="            }" line78="" line79="            if (recvString.includes(&quot;+CWLAP:(&quot;)) {" line80="" line81="                mscnt = 0" line82="                recvString = recvString.slice(recvString.indexOf(&quot;+CWLAP:(&quot;))" line83="                scanflag = 1" line84="                while (1) {" line85="" line86="                    recvString += serial.readString()" line87="                    basic.pause(1)" line88="                    mscnt += 1" line89="" line90="                    // OLED.clear()" line91="                    // OLED.writeStringNewLine(_recvString)" line92="                    if (recvString.includes(&quot;OK&quot;) || mscnt &gt;= 3000) {" line93="" line94="                        if (mscnt &gt;= 3000) {" line95="                            scanWIFIAPFlag = 0" line96="                        } else if (recvString.includes(ssid)) {" line97="                            scanWIFIAPFlag = 1" line98="                        } else {" line99="                            scanWIFIAPFlag = 0" line100="                        }" line101="                        break" line102="                    }" line103="                }" line104="            }" line105="" line106="        }" line107="        recvString = &quot; &quot;" line108="    }" line109="" line110="" line111="    /**" line112="     * connect to Wifi router" line113="     */" line114="    //% block=&quot;connect SmartClassroom Wifi Name = %ssid|Password = %pw&quot;" line115="    //% ssid.defl=your_ssid" line116="    //% pw.defl=your_pwd" line117="    export function connectWifi(ssid: string, pw: string) {" line118="        serial.redirect(SerialPin.P8, SerialPin.P12, BaudRate.BaudRate115200)" line119="        basic.pause(100)" line120="        serial.setTxBufferSize(128)" line121="        serial.setRxBufferSize(128)" line122="        restEsp8266()" line123="        while (1) {" line124="            scanWIFIAP(ssid)" line125="            if (scanWIFIAPFlag) {" line126="                currentCmd = Cmd.ConnectWifi" line127="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`) // connect to Wifi router" line128="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line129="                while (!wifi_connected) {" line130="                    restEsp8266()" line131="                    sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line132="                    control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line133="                }" line134="                break" line135="            } else {" line136="                restEsp8266()" line137="                currentCmd = Cmd.ConnectWifi" line138="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line139="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line140="                if (wifi_connected) {" line141="                    break" line142="                }" line143="            }" line144="        }" line145="    }" line146="" line147="    /**" line148="     * Warning: Deprecated." line149="     * Check if ESP8266 successfully connected to Wifi" line150="     */" line151="    //% block=&quot;Wifi connected %State&quot; weight=70" line152="    export function wifiState(state: boolean) {" line153="        return wifi_connected === state" line154="    }" line155="" line156="    /*----------------------------------MQTT-----------------------*/" line157="    /*" line158="     * Set  MQTT client" line159="     */" line160="    //% subcategory=MQTT weight=30" line161="    //% blockId=initMQTT block=&quot;Set MQTT connection config|scheme: %scheme clientID: %clientID username: %username password: %password&quot;" line162="    export function setMQTT(scheme: SchemeList, clientID: string, username: string, password: string): void {" line163="        sendAT(`AT+MQTTUSERCFG=0,${scheme},&quot;${clientID}&quot;,&quot;${username}&quot;,&quot;${password}&quot;,0,0,&quot;&quot;`, 1000)" line164="    }" line165="" line166="    /*" line167="     * Connect to MQTT broker" line168="     */" line169="    //% subcategory=MQTT weight=25" line170="    //% blockId=connectMQTT block=&quot;connect SmartClassroom Server IP Address: %host port: %port reconnect: $reconnect&quot;" line171="    export function connectMQTT(host: string, port: number, reconnect: boolean): void {" line172="        mqtthost_def = host" line173="        const rec = reconnect ? 0 : 1" line174="        currentCmd = Cmd.ConnectMqtt" line175="        sendAT(`AT+MQTTCONN=0,&quot;${host}&quot;,${port},${rec}`)" line176="        control.waitForEvent(EspEventSource, EspEventValue.ConnectMqtt)" line177="        Object.keys(mqttSubscribeQos).forEach(topic =&gt; {" line178="            const qos = mqttSubscribeQos[topic]" line179="            sendAT(`AT+MQTTSUB=0,&quot;${topic}&quot;,${qos}`, 1000)" line180="        })" line181="    }" line182="" line183="    /*" line184="     * Check if ESP8266 successfully connected to mqtt broker" line185="     */" line186="    //% block=&quot;Smart Classroom Hub is connected&quot;" line187="    //% subcategory=&quot;MQTT&quot; weight=24" line188="    export function isMqttBrokerConnected() {" line189="        return mqttBrokerConnected" line190="    }" line191="" line192="    /*" line193="     * send message" line194="     */" line195="    //% subcategory=MQTT weight=21" line196="    //% blockId=sendMQTT block=&quot;publish %msg to Topic:%topic with Qos:%qos&quot;" line197="    //% msg.defl=message" line198="    //% topic.defl=smartclassroom/demo" line199="    export function publishMqttMessage(msg: string, topic: string, qos: QosList): void {" line200="        sendAT(`AT+MQTTPUB=0,&quot;${topic}&quot;,&quot;${msg}&quot;,${qos},0`, 1000)" line201="        recvString = &quot;&quot;" line202="    }" line203="" line204="    /*" line205="     * disconnect MQTT broker" line206="     */" line207="    //% subcategory=MQTT weight=15" line208="    //% blockId=breakMQTT block=&quot;Disconnect from Smart Classroom Hub&quot;" line209="    export function breakMQTT(): void {" line210="        sendAT(&quot;AT+MQTTCLEAN=0&quot;, 1000)" line211="    }" line212="" line213="    //% block=&quot;when Topic: %topic have new $message with Qos: %qos&quot;" line214="    //% subcategory=MQTT weight=10" line215="    //% draggableParameters" line216="    //% topic.defl=smartclassroom/demo" line217="    export function MqttEvent(topic: string, qos: QosList, handler: (message: string) =&gt; void) {" line218="        mqttSubscribeHandlers[topic] = handler" line219="        mqttSubscribeQos[topic] = qos" line220="    }" line221="" line222="" line223="    /*" line224="     * on serial received data" line225="     */" line226="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line227="        recvString += serial.readString()" line228="        pause(1)" line229="        serialCnt += 1" line230="        if (recvString.includes(&quot;MQTTSUBRECV&quot;)) {" line231="            recvString = recvString.slice(recvString.indexOf(&quot;MQTTSUBRECV&quot;))" line232="            const recvStringSplit = recvString.split(&quot;,&quot;, 4)" line233="            const topic = recvStringSplit[1].slice(1, -1)" line234="            const message = recvStringSplit[3].slice(0, -2)" line235="            mqttSubscribeHandlers[topic] &amp;&amp; mqttSubscribeHandlers[topic](message)" line236="            recvString = &quot;&quot;" line237="        }" line238="" line239="" line240="        switch (currentCmd) {" line241="            case Cmd.ConnectWifi:" line242="                if (recvString.includes(&quot;AT+CWJAP&quot;)) {" line243="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CWJAP&quot;))" line244="                    if (recvString.includes(&quot;WIFI GOT IP&quot;)) {" line245="                        wifi_connected = true" line246="                        recvString = &quot;&quot;" line247="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line248="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line249="                        wifi_connected = false" line250="                        recvString = &quot;&quot;" line251="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line252="                    }" line253="                }" line254="                break" line255="            case Cmd.ConnectMqtt:" line256="                if (recvString.includes(mqtthost_def)) {" line257="                    recvString = recvString.slice(recvString.indexOf(mqtthost_def))" line258="                    if (recvString.includes(&quot;OK&quot;)) {" line259="                        mqttBrokerConnected = true" line260="                        recvString = &quot;&quot;" line261="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line262="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line263="                        mqttBrokerConnected = false" line264="                        recvString = &quot;&quot;" line265="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line266="                    }" line267="                }" line268="                break" line269="        }" line270="    })" line271="}" numlines="272"></mutation></block></statement></block></xml>